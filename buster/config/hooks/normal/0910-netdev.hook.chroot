#!/bin/bash

NETSNIFF_VER="0.6.6"
NETSNIFF_URL="https://github.com/netsniff-ng/netsniff-ng/archive/v$NETSNIFF_VER.tar.gz"

ZEEK_VER="3.0.1"
ZEEK_URL="https://www.zeek.org/downloads/zeek-$ZEEK_VER.tar.gz"
ZEEK_PATCH_URLS=(
  # nothing here for now
)

OPENRESOLV_VER="3.9.2"
OPENRESOLV_URL="https://roy.marples.name/downloads/openresolv/openresolv-$OPENRESOLV_VER.tar.xz"

RESPONDER_VER="3.0.0.0"
RESPONDER_URL="https://github.com/lgandx/Responder/archive/v${RESPONDER_VER}.tar.gz"

BURPSUITE_VER="2.1.07"
BURPSUITE_URL="https://portswigger.net/burp/releases/download?product=community&version=${BURPSUITE_VER}&type=jar"

GHIDRA_URL="https://ghidra-sre.org/ghidra_9.1.1_PUBLIC_20191218.zip"
SYNERGY_URL="https://binaries.symless.com/synergy/v1-core-standard/v1.11.0-stable-b2173efb/synergy_1.11.0.stable_b147%2Bb2173efb_debian_amd64.deb"
PCLOUD_URL="https://p-def4.pcloud.com/cBZetST9hZtTO10SZZZHNp7a7Z2ZZRP5ZkZVcA5VZAkZJFZL5ZqZlJZ5XZX0Z2JZpFZ6JZ9XZG5Z5kZg5Z1EnhkZV1JO38Gs4hBEDarKfEMXzXqXGWVX/pcloud"

# Install netsniff-ng
cd /tmp
curl -L -o netsniff-$NETSNIFF_VER.tar.gz "$NETSNIFF_URL"
tar -xzvf netsniff-$NETSNIFF_VER.tar.gz
cd netsniff-ng-$NETSNIFF_VER
./configure --prefix=/usr --disable-geoip
make netsniff-ng
# make netsniff-ng_install
checkinstall -y -D --strip=yes --stripso=yes --install=yes --fstrans=no --pkgname="netsniff-ng" --pkgversion="$NETSNIFF_VER" --pkgarch="amd64" --pkgsource="$NETSNIFF_URL" make netsniff-ng_install

cd ..
rm -Rf netsniff-$NETSNIFF_VER.tar.gz netsniff-ng-$NETSNIFF_VER
##

# Build and install zeek
mkdir -p /usr/local/src/zeek-patches
cd /usr/local/src/zeek-patches
for i in ${ZEEK_PATCH_URLS[@]}; do
  curl -L -J -O "$i"
done
cd /tmp
curl -L -o zeek-$ZEEK_VER.tar.gz "$ZEEK_URL"
tar -xvzf zeek-$ZEEK_VER.tar.gz
cd zeek-$ZEEK_VER
for i in /usr/local/src/zeek-patches/*; do
  patch -p 1 -r - --no-backup-if-mismatch < "$i" || true
done
./configure --prefix=/opt/zeek --generator=Ninja
cd build
ninja
# ninja install
checkinstall -y -D --strip=yes --stripso=yes --install=yes --fstrans=no --pkgname="zeek" --pkgversion="$ZEEK_VER" --pkgarch="amd64" --pkgsource="$ZEEK_URL" ninja install

# install 3rd party Zeek plugins and scripts
export PATH=/opt/zeek/bin:$PATH
zkg autoconfig
bash /usr/local/bin/zeek_install_plugins.sh
rm -Rf /root/.zkg /usr/local/src/*/.git

cat << 'EOF' >> /opt/zeek/etc/zeekctl.cfg
# all interfaces using lb_method=custom should use AF_PACKET
lb_custom.InterfacePrefix=af_packet::

EOF

# set up default zeek local policy
cat << 'EOF' > /opt/zeek/share/zeek/site/local.zeek
##! Zeek local site policy. Customize as appropriate.
##!
##! See https://github.com/zeek/zeekctl
##!     https://docs.zeek.org/en/stable/script-reference/scripts.html
##!     https://github.com/zeek/zeek/blob/master/scripts/site/local.zeek

redef Broker::default_listen_address = "127.0.0.1";
redef ignore_checksums = T;
redef HTTP::default_capture_password = T;
redef FTP::default_capture_password = T;
redef SOCKS::default_capture_password = T;

@load tuning/defaults
@load misc/scan
@load frameworks/software/vulnerable
@load frameworks/software/version-changes
@load frameworks/software/windows-version-detection
@load-sigs frameworks/signatures/detect-windows-shells
@load protocols/conn/known-hosts
@load protocols/conn/known-services
@load protocols/dhcp/software
@load protocols/dns/detect-external-names
@load protocols/ftp/detect
@load protocols/ftp/software
@load protocols/http/detect-sqli
@load protocols/http/detect-webapps
@load protocols/http/software
@load protocols/http/software-browser-plugins
@load protocols/mysql/software
@load protocols/smtp/software
@load protocols/ssh/detect-bruteforcing
@load protocols/ssh/geo-data
@load protocols/ssh/interesting-hostnames
@load protocols/ssh/software
@load protocols/ssl/known-certs
@load protocols/ssl/log-hostcerts-only
@load protocols/ssl/validate-certs
@load tuning/track-all-assets.zeek
@load frameworks/files/hash-all-files
@load policy/protocols/conn/vlan-logging
@load policy/protocols/conn/mac-logging
@load policy/protocols/modbus/track-memmap
@load policy/protocols/modbus/known-masters-slaves
@load policy/protocols/mqtt
# @load frameworks/files/detect-MHR

# custom packages installed manually
@load Salesforce/GQUIC
@load ./bzar
# custom packages managed by zkg via packages/packages.zeek
@load ./packages/packages.zeek
# and apparently some installed packages (BRO::LDAP) are loaded automatically

EOF

# cleanup
cd /tmp
rm -Rf zeek-$ZEEK_VER*
###

# Install openresolv (version in buster repos is out of date)
OPENRESOLV_VER="3.9.2"
OPENRESOLV_URL="https://roy.marples.name/downloads/openresolv/openresolv-$OPENRESOLV_VER.tar.xz"
curl -L -o "openresolv-$OPENRESOLV_VER.tar.xz" "$OPENRESOLV_URL"
tar xvf "openresolv-$OPENRESOLV_VER.tar.xz"
cd "openresolv-$OPENRESOLV_VER"/
./configure --prefix=/
make
# make install
checkinstall -y -D --strip=yes --stripso=yes --install=yes --fstrans=no --pkgname="openresolv" --pkgversion="$OPENRESOLV_VER" --pkgarch="amd64" --pkgsource="$OPENRESOLV_URL"
cd ../
rm -rf "openresolv-$OPENRESOLV_VER.tar.xz" "openresolv-$OPENRESOLV_VER"
###

# Install responder.py
curl -L -o "Responder-${RESPONDER_VER}.tar.gz" "$RESPONDER_URL"
tar -xvzf Responder-${RESPONDER_VER}.tar.gz
mv ./Responder-${RESPONDER_VER} /opt/responder
rm -Rf Responder-${RESPONDER_VER}.tar.gz
ln -s /opt/responder/Responder.py /usr/local/bin/Responder.py
###

# update freshclam
systemctl status clamav-freshclam && systemctl stop clamav-freshclam
freshclam --stdout --quiet --no-warnings --foreground=true

# burpsuite
mkdir -p /opt/burpsuite
curl -L -o "/opt/burpsuite/burpsuite_community_v${BURPSUITE_VER}.jar" "$BURPSUITE_URL"

# ghidra
curl -L -o "/tmp/ghidra.zip" "$GHIDRA_URL"
unzip "/tmp/ghidra.zip" -d "/opt"
rm -f "/tmp/ghidra.zip"

# synergy
curl -L -o "/tmp/synergy_debian_amd64.deb" "$SYNERGY_URL"
dpkg -i "/tmp/synergy_debian_amd64.deb"
rm -f "/tmp/synergy_debian_amd64.deb"

# pcloud
curl -L -o "/usr/bin/pcloud" "$PCLOUD_URL"
chmod 755 "/usr/bin/pcloud"

# set up capabilities for network-related tools
EXE_LESS_CAP=(
  /sbin/ethtool
  /opt/zeek/bin/zeek
  /opt/zeek/bin/capstats
  /usr/bin/dumpcap
  /usr/bin/tcpflow
  /usr/bin/tcpreplay
  /usr/sbin/arpspoof
  /usr/sbin/dnsspoof
  /usr/sbin/dsniff
  /usr/sbin/filesnarf
  /usr/sbin/macof
  /usr/sbin/mailsnarf
  /usr/sbin/msgsnarf
  /usr/sbin/nethogs
  /usr/sbin/sshmitm
  /usr/sbin/sshow
  /usr/sbin/tcpdump
  /usr/sbin/tcpkill
  /usr/sbin/tcpnice
  /usr/sbin/urlsnarf
  /usr/sbin/webmitm
  /usr/sbin/webspy
)
EXE_MORE_CAP=(
  /usr/sbin/astraceroute
  /usr/sbin/bpfc
  /usr/sbin/curvetun
  /usr/sbin/flowtop
  /usr/sbin/ifpps
  /usr/sbin/mausezahn
  /usr/sbin/netsniff-ng
  /usr/sbin/stenotype
  /usr/sbin/trafgen
)
for i in ${EXE_LESS_CAP[@]}; do
  $SUDO_CMD chown root:netdev "$i" && \
    $SUDO_CMD setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' "$i"
done
for i in ${EXE_MORE_CAP[@]}; do
  $SUDO_CMD chown root:netdev "$i" && \
    $SUDO_CMD setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip CAP_IPC_LOCK+eip CAP_SYS_ADMIN+eip' "$i"
done

mkdir -p /var/lib/stenographer && \
  chown root:stenographer /var/lib/stenographer /usr/sbin/stenotype /etc/stenographer/certs/*.pem && \
  chmod 440 /etc/stenographer/certs/*.pem && \
  chmod 775 /var/lib/stenographer /usr/sbin/stenotype

###