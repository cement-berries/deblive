#!/bin/bash

NETSNIFF_VER="0.6.6"
NETSNIFF_URL="https://github.com/netsniff-ng/netsniff-ng/archive/v$NETSNIFF_VER.tar.gz"

ZEEK_VER="2.6.4"
ZEEK_URL="https://www.bro.org/downloads/bro-$ZEEK_VER.tar.gz"

ZEEK_AFPACKET_PLUGIN_VER="1.4.0"
ZEEK_AFPACKET_PLUGIN_URL="https://github.com/J-Gras/bro-af_packet-plugin/archive/$ZEEK_AFPACKET_PLUGIN_VER.tar.gz"

ZEEK_CORELIGHT_COMMUNITY_ID_PLUGIN_VER="1.2"
ZEEK_CORELIGHT_COMMUNITY_ID_PLUGIN_URL="https://github.com/corelight/bro-community-id/archive/$ZEEK_CORELIGHT_COMMUNITY_ID_PLUGIN_VER.tar.gz"

BEATS_VER="6.8.3"
BEATS_OSS="-oss"
BEATS_DEB_URL_TEMPLATE_REPLACER="XXXXX"
BEATS_DEB_URL_TEMPLATE="https://artifacts.elastic.co/downloads/beats/$BEATS_DEB_URL_TEMPLATE_REPLACER/$BEATS_DEB_URL_TEMPLATE_REPLACER$BEATS_OSS-$BEATS_VER-amd64.deb"

RESPONDER_VER="2.3.4.0"
RESPONDER_URL="https://github.com/lgandx/Responder/archive/v${RESPONDER_VER}.tar.gz"

BURPSUITE_VER="2.1.02"
BURPSUITE_URL="https://portswigger.net/burp/releases/download?product=community&version=${BURPSUITE_VER}&type=jar"

GHIDRA_URL="https://ghidra-sre.org/ghidra_9.1-BETA_DEV_20190923.zip"

# Install netsniff-ng
cd /tmp
curl -L -o netsniff-$NETSNIFF_VER.tar.gz "$NETSNIFF_URL"
tar -xzvf netsniff-$NETSNIFF_VER.tar.gz
cd netsniff-ng-$NETSNIFF_VER
./configure --prefix=/usr --disable-geoip
make netsniff-ng
# make netsniff-ng_install
checkinstall -y -D --install=yes --fstrans=no --pkgname="netsniff-ng" --pkgversion="$NETSNIFF_VER" --pkgarch="amd64" --pkgsource="$NETSNIFF_URL" make netsniff-ng_install

cd ..
rm -Rf netsniff-$NETSNIFF_VER.tar.gz netsniff-ng-$NETSNIFF_VER
##

# Build and install zeek, with JA3 SSL fingerprinting and HASSH SSH fingerprinting for Zeek
cd /tmp
curl -L -o bro-$ZEEK_VER.tar.gz "$ZEEK_URL"
git clone --depth 1 https://github.com/salesforce/ja3 ja3
git clone --depth 1 https://github.com/salesforce/hassh hassh
tar -xvzf bro-$ZEEK_VER.tar.gz
cd bro-$ZEEK_VER
mkdir -p ./scripts/site/ja3 ./scripts/site/hassh
cp -vr /tmp/ja3/bro/* ./scripts/site/ja3
cp -vr /tmp/hassh/bro/* ./scripts/site/hassh
./configure --prefix=/opt/bro --generator=Ninja
cd build
ninja
# ninja install
checkinstall -y -D --install=yes --fstrans=no --pkgname="bro" --pkgversion="$BRO_VER" --pkgarch="amd64" --pkgsource="$BRO_URL" ninja install


# install AF_PACKET plugin
cd /tmp
curl -L -o bro-af_packet-$ZEEK_AFPACKET_PLUGIN_VER.tar.gz "$ZEEK_AFPACKET_PLUGIN_URL"
tar -xvzf bro-af_packet-$ZEEK_AFPACKET_PLUGIN_VER.tar.gz
cd bro-af_packet-plugin-$ZEEK_AFPACKET_PLUGIN_VER
./configure --with-kernel=/usr --bro-dist=/tmp/bro-$ZEEK_VER --install-root=/opt/bro/lib/bro/plugins
make
# make install
checkinstall -y -D --install=yes --fstrans=no --pkgname="bro-afpacket" --pkgversion="$ZEEK_AFPACKET_PLUGIN_VER" --pkgarch="amd64" --pkgsource="$ZEEK_AFPACKET_PLUGIN_URL"

# install corelight flow community ID plugin
cd /tmp
curl -L -o bro-community-id-$ZEEK_CORELIGHT_COMMUNITY_ID_PLUGIN_VER.tar.gz "$ZEEK_CORELIGHT_COMMUNITY_ID_PLUGIN_URL"
tar -xvzf bro-community-id-$ZEEK_CORELIGHT_COMMUNITY_ID_PLUGIN_VER.tar.gz
cd bro-community-id-$ZEEK_CORELIGHT_COMMUNITY_ID_PLUGIN_VER
./configure --bro-dist=/tmp/bro-$ZEEK_VER --install-root=/opt/bro/lib/bro/plugins
make
# make install
checkinstall -y -D --install=yes --fstrans=no --pkgname="bro-community-id" --pkgversion="$ZEEK_CORELIGHT_COMMUNITY_ID_PLUGIN_VER" --pkgarch="amd64" --pkgsource="$ZEEK_CORELIGHT_COMMUNITY_ID_PLUGIN_URL"


cat << 'EOF' >> /opt/bro/etc/broctl.cfg
# all interfaces using lb_method=custom should use AF_PACKET
lb_custom.InterfacePrefix=af_packet::

EOF

# set up default zeek local policy
cat << 'EOF' > /opt/bro/share/bro/site/local.bro
##! Zeek local site policy. Customize as appropriate.
##!
##! See https://github.com/zeek/zeekctl
##!     https://docs.zeek.org/en/stable/script-reference/scripts.html
##!     https://github.com/zeek/zeek/blob/master/scripts/site/local.zeek

redef Broker::default_listen_address = "127.0.0.1";
redef ignore_checksums = T;
redef HTTP::default_capture_password = T;
redef FTP::default_capture_password = T;
redef SOCKS::default_capture_password = T;

@load tuning/defaults
@load misc/scan
@load frameworks/software/vulnerable
@load frameworks/software/version-changes
@load-sigs frameworks/signatures/detect-windows-shells
@load protocols/ftp/software
@load protocols/smtp/software
@load protocols/ssh/software
@load protocols/http/software
# @load protocols/http/detect-webapps
@load protocols/dns/detect-external-names
@load protocols/ftp/detect
@load protocols/conn/known-hosts
@load protocols/conn/known-services
@load protocols/ssl/known-certs
@load tuning/track-all-assets.bro
@load protocols/ssl/validate-certs
@load protocols/ssl/log-hostcerts-only
@load protocols/ssh/geo-data
@load protocols/ssh/detect-bruteforcing
@load protocols/ssh/interesting-hostnames
@load protocols/http/detect-sqli
@load frameworks/files/hash-all-files
# @load frameworks/files/detect-MHR
@load policy/protocols/conn/vlan-logging
@load policy/protocols/conn/mac-logging
@load Corelight/CommunityID
@load ./ja3
@load ./hassh

EOF

# cleanup
cd /tmp
rm -Rf bro-$ZEEK_VER* bro-af_packet-plugin-* ja3* bro-community-id-*
###

# tweak some dashboards for, then install filebeat/metricbeat/auditbeat/packetbeat
for BEAT in filebeat metricbeat auditbeat packetbeat; do
  BEATS_URL="$(echo "$BEATS_DEB_URL_TEMPLATE" | sed "s/$BEATS_DEB_URL_TEMPLATE_REPLACER/$BEAT/g")"
  BEATS_DEB="$BEAT-$BEATS_VER-amd64.deb"
  BEATS_NEW_DEB="$BEAT-dark-$BEATS_VER-amd64.deb"
  BEATS_TMP_DIR="$BEAT-deb"
  pushd /tmp && \
    curl -f -L -o "$BEATS_DEB" "$BEATS_URL" && \
    dpkg-deb -x "$BEATS_DEB" "$BEATS_TMP_DIR" && \
    dpkg-deb -e "$BEATS_DEB" "$BEATS_TMP_DIR/DEBIAN" && \
    sed -i 's@\(\\"darkTheme\\" *: *\)false@\1true@g' "$BEATS_TMP_DIR"/usr/share/$BEAT/kibana/?/dashboard/*.json && \
    ( [[ "$BEAT" == "metricbeat" ]] && sed -i -e "s@ |\\\\\\\n\[Containers overview\](#/dashboard/CPU-slash-Memory-per-container)@@g" "$BEATS_TMP_DIR"/usr/share/$BEAT/kibana/?/dashboard/* || true ) && \
    pushd "$BEATS_TMP_DIR" && ( rm -f DEBIAN/md5sums && find . -type f ! -regex '.*.hg.*' ! -regex '.*?debian-binary.*' ! -regex '.*?DEBIAN.*' -print0 | xargs -l -0 md5sum >> DEBIAN/md5sums ) && popd && \
    dpkg-deb -b "$BEATS_TMP_DIR" "$BEATS_NEW_DEB" && \
    rm -rf "$BEATS_TMP_DIR" && \
    dpkg -i "$BEATS_NEW_DEB" && \
    rm -rf "$BEATS_TMP_DIR" "$BEATS_DEB" "$BEATS_NEW_DEB" && \
    popd
done

# Install responder.py
wget --quiet -O Responder-${RESPONDER_VER}.tar.gz $RESPONDER_URL
tar -xvzf Responder-${RESPONDER_VER}.tar.gz
mv ./Responder-${RESPONDER_VER} /opt/responder
rm -Rf Responder-${RESPONDER_VER}.tar.gz
ln -s /opt/responder/Responder.py /usr/local/bin/Responder.py
###

# update freshclam
systemctl status clamav-freshclam && systemctl stop clamav-freshclam
freshclam --stdout --verbose --foreground=true

# burpsuite
mkdir -p /opt/burpsuite
curl -o "/opt/burpsuite/burpsuite_community_v${BURPSUITE_VER}.jar" "$BURPSUITE_URL"

# ghidra
curl -o "/tmp/ghidra.zip" "$GHIDRA_URL"
unzip "/tmp/ghidra.zip" -d "/opt"
rm -f "/tmp/ghidra.zip"

# set up capabilities for network-related tools
EXE_LESS_CAP=(
  /sbin/ethtool
  /opt/bro/bin/bro
  /opt/bro/bin/capstats
  /usr/bin/dumpcap
  /usr/bin/tcpflow
  /usr/bin/tcpreplay
  /usr/sbin/arpspoof
  /usr/sbin/dnsspoof
  /usr/sbin/dsniff
  /usr/sbin/filesnarf
  /usr/sbin/macof
  /usr/sbin/mailsnarf
  /usr/sbin/msgsnarf
  /usr/sbin/nethogs
  /usr/sbin/sshmitm
  /usr/sbin/sshow
  /usr/sbin/tcpdump
  /usr/sbin/tcpkill
  /usr/sbin/tcpnice
  /usr/sbin/urlsnarf
  /usr/sbin/webmitm
  /usr/sbin/webspy
)
EXE_MORE_CAP=(
  /usr/sbin/astraceroute
  /usr/sbin/bpfc
  /usr/sbin/curvetun
  /usr/sbin/flowtop
  /usr/sbin/ifpps
  /usr/sbin/mausezahn
  /usr/sbin/netsniff-ng
  /usr/sbin/stenotype
  /usr/sbin/trafgen
)
for i in ${EXE_LESS_CAP[@]}; do
  $SUDO_CMD chown root:netdev "$i" && \
    $SUDO_CMD setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' "$i"
done
for i in ${EXE_MORE_CAP[@]}; do
  $SUDO_CMD chown root:netdev "$i" && \
    $SUDO_CMD setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip CAP_IPC_LOCK+eip CAP_SYS_ADMIN+eip' "$i"
done

mkdir -p /var/lib/stenographer && \
  chown root:stenographer /var/lib/stenographer /usr/sbin/stenotype /etc/stenographer/certs/*.pem && \
  chmod 440 /etc/stenographer/certs/*.pem && \
  chmod 775 /var/lib/stenographer /usr/sbin/stenotype

###